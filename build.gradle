plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
    id 'checkstyle'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.moabam'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

compileJava {
    options.compilerArgs << '-parameters'
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.compilerArgs << '-parameters'
    options.encoding = 'UTF-8'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

def querydslSrcDir = 'src/main/generated'

clean {
    delete file(querydslSrcDir)
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

configurations {
    asciidoctorExtensions

    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Bean Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.11.0'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // H2
    implementation 'com.h2database:h2'

    // Configuration Binding
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // Apache Commons Lang 3
    implementation 'org.apache.commons:commons-lang3:3.13.0'

    // Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Embedded-Redis
    implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'

    // Firebase Admin
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // JSON parser
    implementation 'org.json:json:20230618'

    // Asciidoctor
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // RestDocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // S3
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.0.2")
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'

    // Webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Slack Webhook
    implementation 'net.gpedro.integrations.slack:slack-webhook:1.4.0'

    // Logback Slack Appender
    implementation 'com.github.maricn:logback-slack-appender:1.6.1'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    def Qdomains = []

    for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, excludes: [
                    "**/*Application*",
                    "**/*Config*",
                    "**/*Request*",
                    "**/*Response*",
                    "**/*Exception*",
                    "**/*Mapper*",
                    "**/*ErrorMessage*",
                    "**/*DynamicQuery*",
                    "**/*BaseTimeEntity*",
                    "**/*HealthCheckController*",
                    "**/*S3Manager*",
                ] + Qdomains)
            })
        )
    }
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    toolVersion = "10.4"
    maxWarnings = 0
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    configProperties = ["suppressionFile": "${rootDir}/config/checkstyle/suppressions.xml"]
}

sonar {
    properties {
        property "sonar.projectKey", "team-moabam_moabam-BE"
        property "sonar.organization", "team-moabam-sonarcloud-secret-key"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
        property 'sonar.coverage.exclusions', '**/test/**, **/Q*.java, **/*Doc*.java, **/resources/** ' +
            ',**/*Application*.java , **/*Config*.java, **/*Request*.java, **/*Response*.java ,**/*Exception*.java ' +
            ',**/*ErrorMessage*.java, **/*Mapper*.java, **/*DynamicQuery*, **/*BaseTimeEntity*, **/*HealthCheckController* ' +
            ', **/*S3Manager*.java'
        property 'sonar.java.checkstyle.reportPaths', 'build/reports/checkstyle/main.xml'
    }
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

bootJar {
    dependsOn copyDocument
}

build {
    dependsOn copyDocument
}
